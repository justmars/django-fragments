{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-fragments Docs","text":"<p>Reusable partial templates, originally meant for a Django boilerplate, refactored out into an independent library.</p>"},{"location":"#installation","title":"Installation","text":"<p>After installation, e.g. <code>pip install django-fragments</code></p> Python<pre><code>INSTALLED_APPS = [\n\"django_fragments\", # add this\n]\n...\nFRAGMENTS = {\n\"icons_prefix\": \"heroicons\", # prefix to use for icons\n\"icons_path\": BASE_DIR / \"templates\" / \"xxx\" # type: Path, location where svg icons will be stored\n}\n</code></pre> <p>Invoke via <code>{% load fragments %}</code></p>"},{"location":"#fragments","title":"Fragments","text":""},{"location":"#shortcuts","title":"Shortcuts","text":"<ol> <li><code>{% icon %}</code> - idiomatic <code>&lt;svg&gt;</code> combiner with neighboring / parent tags</li> <li><code>{% hput %}</code> - encapsulated, tweakable <code>&lt;input&gt;</code> with option for inline validation.</li> <li><code>{% nava %}</code> - Uses <code>format_html</code> to output an <code>&lt;a&gt;</code> element fit for desktop/mobile navbar links.</li> <li><code>{% curr %}</code> - Outputs string <code>aria-current=page</code> if url is current.</li> </ol>"},{"location":"#open-graph","title":"Open Graph","text":"<ol> <li><code>{% og_title %}</code> - Formats the meta tags related to the title</li> <li><code>{% og_desc %}</code> - Formats the meta tags related to the description</li> <li><code>{% og_img %}</code> - Formats the meta tags related to the image</li> </ol>"},{"location":"#utils","title":"Utils","text":"<ol> <li><code>{% whitespaceless %}</code></li> <li>Filtering of Attributes</li> <li>Wrap Icon Processing</li> </ol>"},{"location":"#notes","title":"Notes","text":"<p>Some notes from :</p> <ol> <li>Checking for the required number of arguments, etc., has already been done by the time our function is called, so we don\u2019t need to do that.</li> <li>The quotes around the argument (if any) have already been stripped away, so we receive a plain string.</li> <li>If the argument was a template variable, our function is passed the current value of the variable, not the variable itself.</li> </ol> Simple tag conventions<pre><code>{% icon\nname='x_mark_mini'\nparent_title=\"{{variable}}\"\n%}\n{# won't work, multiline tags are not supported in Django #}\n{% icon name='x_mark_mini' parent_title=\"{{variable}}\" %}\n{# won't work, the variable needs to be passed directly #}\n{% icon name='x_mark_mini' parent_title=variable %}\n{# works #}\n{% with variable='This is a title' %}\n{% icon name='x_mark_mini' parent_title=variable %}\n{% endwith %}\n{# works #}\n</code></pre>"},{"location":"hput/","title":"<code>{% hput %}</code>","text":""},{"location":"hput/#concept","title":"Concept","text":"<p><code>hput</code> customizes a BoundField for rendering, with option to supply inline validation using the logic derived from hernantz.</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>&lt;form method=\"post\" action=\"{% url 'account_signup' %}\"&gt;\n{% csrf_token %}\n{% hput form.email validate=\"/this-is-an-endpoint\" %}\n  ...\n&lt;/form&gt;\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;form method=\"post\" action=\"/accounts/signup/\"&gt;\n&lt;input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"xxx\"&gt;\n&lt;div id=\"hput_id_email\"\nhx-select=\"#hput_id_email\"\nhx-post=\"/this-is-an-endpoint\"\nhx-trigger=\"blur from:find input\"\nhx-target=\"#hput_id_email\"\nhx-swap=\"outerHTML\"\nclass=\"h\"\ndata-widget=\"email\"&gt;\n&lt;label for=\"id_email\"&gt;Email&lt;/label&gt;\n&lt;input type=\"email\" name=\"email\" required id=\"id_email\"&gt;\n&lt;small&gt;Testable form&lt;/small&gt;\n&lt;/div&gt;\n  ...\n&lt;/form&gt;\n</code></pre> <p>Use of django_widget_tweaks inlined with <code>{% hput ... %}</code> works:</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>&lt;form method=\"post\" action=\"{% url 'account_signup' %}\"&gt;\n{% csrf_token %}\n{% hput field=form.email|attr:\"placeholder=Hello World!\" %}\n  ...\n&lt;/form&gt;\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;form method=\"post\" action=\"/accounts/signup/\"&gt;\n&lt;input type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"xxx\"&gt;\n&lt;div&gt; {# how the input field is rendered #}\n    &lt;label for=\"id_email\"&gt;E-mail&lt;/label&gt;\n&lt;input type=\"email\" name=\"email\" placeholder=\"Hello World!\" autocomplete=\"email\" required id=\"id_email\"&gt;\n&lt;small&gt;Testable form&lt;/small&gt;\n&lt;/div&gt;\n  ...\n&lt;/form&gt;\n</code></pre>"},{"location":"hput/#hx_enable_inline_validation","title":"<code>hx_enable_inline_validation()</code>","text":"<p>Given a <code>BoundField</code> and a <code>url</code>, implement inline field validation proposed by hernantz. It makes use of various tags from htmx.</p> <p>The gist: form is prematurely submitted (because of <code>hx-post</code>) as an AJAX-request, the partial template response will <code>hx-swap</code> an <code>hx-target</code>. In other words, the old field is replaced by the same field... but now as a result of <code>form.is_valid()</code>.</p> <p>The response,if it contains errors, will include an error list for the field.</p> <p>Instead of rendering the entire partial response, the use of <code>hx-select</code> limits the replacement to a segment of the partial response.</p> <p>Parameters:</p> Name Type Description Default <code>bound</code> <code>BoundField</code> <p>A Django field with data previously submitted</p> required <code>url</code> <code>str</code> <p>Where the form is submitted.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of text attributes that can be added to a wrapping div of a <code>BoundField</code></p> Source code in <code>django_fragments/templatetags/helpers.py</code> Python<pre><code>def hx_enable_inline_validation(bound: BoundField, url: str) -&gt; str:\n\"\"\"Given a `BoundField` and a `url`, implement inline field validation proposed by\n    [hernantz](https://hernantz.github.io/inline-form-validation-with-django-and-htmx.html).\n    It makes use of various tags from [htmx](https://htmx.org).\n    The gist: form is prematurely submitted (because of `hx-post`) as an AJAX-request,\n    the partial template response will `hx-swap` an `hx-target`. In other words, the\n    old field is replaced by the same field... but now as a result of `form.is_valid()`.\n    The response,if it contains errors, will include an error list for the field.\n    Instead of rendering the entire partial response, the use of `hx-select` limits the\n    replacement to a segment of the partial response.\n    Args:\n        bound (BoundField): A Django field with data previously submitted\n        url (str): Where the form is submitted.\n    Returns:\n        str: A string of text attributes that can be added to a wrapping div of a `BoundField`\n    \"\"\"  # noqa: E501\nidx = f\"hput_{bound.id_for_label}\"\nreturn attrize(\n{\n\"id\": idx,\n\"hx-select\": f\"#{idx}\",\n\"hx-post\": url,\n\"hx-trigger\": \"blur from:find input\",\n\"hx-target\": f\"#{idx}\",\n\"hx-swap\": \"outerHTML\",\n}\n)\n</code></pre>"},{"location":"icon/","title":"<code>{% icon %}</code>","text":""},{"location":"icon/#concept","title":"Concept","text":"<p><code>icon</code> combines <code>&lt;svg&gt;</code> (via named <code>*.html</code>) with a <code>&lt;span&gt;</code> (before or after) it and an optional parent tag around it.</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>{% load fragments %}\n&lt;html&gt;\n{# assumes heroicons as default unless modified #}\n{% icon name='x_mark_mini' aria_hidden=\"true\" pre_text=\"Close menu\" pre_class=\"sr-only\"  %}\n{# re: 'x_mark_mini' (1), re: attributes (2) #}\n&lt;/html&gt;\n</code></pre> <ol> <li><code>name='x_mark_mini'</code> refers to a heroicon (default) svg copy/pasted into a file named 'heroicon_x.html'</li> <li>The <code>aria_hidden</code> attribute is converted to <code>aria-hidden</code>, <code>pre_text</code> and <code>pre_class</code> means add a <code>&lt;span class='sr-only'&gt;Close menu&lt;span&gt;</code> before (pre)_ the svg icon.</li> </ol> Output HTML after the Template is populated with the Context.<pre><code>&lt;html&gt;\n&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;\n&lt;svg\naria-hidden=\"true\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" viewbox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;path d=\"M6 18L18 6M6 6l12 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;\n&lt;/path&gt;\n&lt;/svg&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"icon/#setup","title":"Setup","text":"<p>Declare folder and prefix as part of settings:</p> Python<pre><code>FRAGMENTS = {\n\"icons_prefix\": \"heroicons\", # must be string type\n\"icons_path\": BASE_DIR / # must be Path type\n}\n</code></pre>"},{"location":"icon/#svg-placement","title":"SVG Placement","text":"<ol> <li>Copy <code>&lt;svg&gt;</code> markup from a source such as heroicons, bootstrap, etc.;</li> <li>The name of the file to be created is relevant. Note source, we'll call this the <code>prefix</code>;</li> <li>Create <code>.html</code> file found in a template <code>folder</code> (default: <code>/src/templates/component/svg</code>);</li> <li>File follows convention <code>prefix</code> + <code>_</code> + <code>name</code> (of the <code>&lt;svg&gt;</code> from the source)<code>.html</code>.</li> <li><code>name</code> must replace dashes <code>-</code> with underscores <code>_</code></li> </ol> <p>See sample structure:</p> Prefix of source, name of svg<pre><code>...\n&lt;root&gt;\n\u251c\u2500\u2500 config/\n\u251c\u2500\u2500 static/\n\u251c\u2500\u2500 templates/\n\u251c\u2500\u2500 svg/\n\u251c\u2500\u2500 bootstrap_github.html # (1)\n\u251c\u2500\u2500 heroicons_x_mark_mini.html # insert svg markup here (2)\n...\n</code></pre> <ol> <li> <p>Dissected (prefix used) <code>bootstrap</code>; (icon name) <code>github</code></p> <p>Use as: <code>{% icon name='github' prefix=\"bootstrap\" %}</code></p> </li> <li> <p>Dissected:</p> <ol> <li>prefix used: <code>heroicons</code></li> <li>icon name: <code>x_mark_mini</code></li> </ol> <p>Use as:</p> <ol> <li><code>{% icon name='x_mark_mini' prefix=\"heroicons\" %}</code>; or</li> <li><code>{% icon name='x_mark_mini' %}</code> (since heroicons is the default).</li> </ol> <p>The svg markup in the file will look like:</p> x_mark_mini from heroicons copy/pasted<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5\"&gt;\n&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" /&gt;\n&lt;/svg&gt;\n</code></pre> </li> </ol>"},{"location":"icon/#basis","title":"Basis","text":"<p>Make an <code>&lt;svg&gt;</code> fragment, using a file found within the <code>name</code> + <code>prefix</code> + <code>folder</code> path, and add the appropriate css classes and attributes, optionally including parent/sibling tags when parameters dictate.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The prefixless (prefix_) name of the <code>html</code> file containing an <code>&lt;svg&gt;</code> icon, presumes to be formatted and included in the proper folder previously.</p> required <code>css</code> <code>str</code> <p>Previously defined CSS to add to the <code>&lt;svg&gt;</code> icon. Defaults to None.</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Source of the svg file; needs to be declared in <code>settings.py</code>.</p> <code>settings.FRAGMENTS.get('icons_prefix')</code> <code>folder</code> <code>str</code> <p>Where to find the template; needs to be declared in <code>settings.py</code>.</p> <code>settings.FRAGMENTS.get('icons_path')</code> <code>**kwargs</code> <code>dict</code> <p>The following kwargs: <code>pre_</code>, <code>post_</code>, and <code>parent_</code> args are respected by <code>start_html_tag_helpers</code></p> <code>{}</code> <p>Returns:</p> Name Type Description <code>SafeString</code> <code>SafeText</code> <p>Small HTML fragment visually representing an svg icon but which may contain related tags.</p> Source code in <code>django_fragments/templatetags/fragments.py</code> Python<pre><code>@register.simple_tag\ndef icon(\nname: str,\nprefix: str = settings.FRAGMENTS.get(\"icons_prefix\"),\nfolder: Path = settings.FRAGMENTS.get(\"icons_path\"),\ncss: str | None = None,\n**kwargs,\n) -&gt; SafeText:\n\"\"\"Make an `&lt;svg&gt;` fragment, using a file found within the `name` + `prefix` + `folder` path, and add the appropriate\n    css classes and attributes, optionally including parent/sibling tags when parameters dictate.\n    Args:\n        name (str): The prefixless (prefix_) name of the `html` file containing an `&lt;svg&gt;` icon, presumes to be formatted and included in the proper folder previously.\n        css (str, optional): Previously defined CSS to add to the `&lt;svg&gt;` icon. Defaults to None.\n        prefix (str, optional): Source of the svg file; needs to be declared in `settings.py`.\n        folder (str, optional): Where to find the template; needs to be declared in `settings.py`.\n        **kwargs (dict): The following kwargs: `pre_`, `post_`, and `parent_` args are respected by `start_html_tag_helpers`\n    Returns:\n        SafeString: Small HTML fragment visually representing an svg icon but which may contain related tags.\n    \"\"\"  # noqa: E501\npath = folder / f\"{prefix}_{name}.html\"\nhtml = render_to_string(str(path))\nsvg_with_kwargs = wrap_svg(html_markup=html, css=css, **kwargs)\nreturn mark_safe(str(svg_with_kwargs).strip())\n</code></pre>"},{"location":"nava/","title":"<code>{% nava %}</code>","text":""},{"location":"nava/#concept","title":"Concept","text":"<p>Uses <code>django.utils.format_html()</code> to output an <code>&lt;a&gt;</code> element. When the <code>request</code> object is included in the template tag, it will call <code>curr()</code> to vet whether the element should include <code>aria-current=page</code>. This makes it fit for desktop/mobile navbar link.</p> before:  fragmentafter: html  Inclusion in nav via Django Template Language<pre><code>&lt;nav&gt;\n{% nava 'home' 'Home' css=\"some css classes here\" request=request %}\n{% nava 'about' 'About' css=\"some css classes here\" request=request %}\n&lt;/nav&gt;\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;nav&gt;&lt;!-- Assume user is presently in the about page --&gt;\n&lt;a href=\"/home\" class=\"some css classes here\"&gt;Home&lt;/a&gt;\n&lt;a aria-current=\"page\" href=\"/about\" class=\"some css classes here\"&gt;About&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre> <p>HTML fragment: <code>&lt;a&gt;</code> tag for desktop/mobile navbar links.</p> <p>Checks if link represented by reverse name url <code>reversible</code> is the current path via the request, if it is provided.</p> <p>In the latter case, on match of the <code>request.path</code> to the <code>reversible</code>, add <code>aria-current=true</code></p> <p>Parameters:</p> Name Type Description Default <code>reversible</code> <code>str</code> <p>The value will be passed to the <code>django.urls.reverse()</code> function without keyword arguments</p> required <code>text</code> <code>str | None</code> <p>The text to incude within the anchor element, if any. Defaults to None.</p> <code>None</code> <code>css</code> <code>str | None</code> <p>If provided, will populate the <code>class</code> attribute of the anchor element. Defaults to None.</p> <code>None</code> <code>request</code> <code>HttpRequest | None</code> <p>The django http request object to ascertain the present path of the request. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SafeText</code> <code>SafeText</code> <p>The output anchor tag</p> Source code in <code>django_fragments/templatetags/fragments.py</code> Python<pre><code>@register.simple_tag\ndef nava(\nreversible: str,\ntext: str | None = None,\ncss: str | None = None,\nrequest: HttpRequest | None = None,\n) -&gt; SafeText:\n\"\"\"HTML fragment: `&lt;a&gt;` tag for desktop/mobile navbar links.\n    Checks if link represented by reverse name url `reversible` is the _current_ path via the request, if it is provided.\n    In the latter case, on match of the `request.path` to the `reversible`, add `aria-current=true`\n    Args:\n        reversible (str): The value will be passed to the `django.urls.reverse()` function without keyword arguments\n        text (str | None, optional): The text to incude within the anchor element, if any. Defaults to None.\n        css (str | None, optional): If provided, will populate the `class` attribute of the anchor element. Defaults to None.\n        request (HttpRequest | None, optional): The django http request object to ascertain the present path of the request. Defaults to None.\n    Returns:\n        SafeText: The output anchor tag\n    \"\"\"  # noqa: E501\nreturn format_html(\n\"&lt;a {aria} href='{url}' class='{css}'&gt;{text}&lt;/a&gt;\",\ntext=text or \"\",\nurl=reverse(reversible),\ncss=css,\naria=curr(request.path, reversible) if request else \"\",\n)\n</code></pre>"},{"location":"nava/#curr","title":"<code>curr</code>","text":"<p>Returns a string <code>aria-current</code> for use as an attribute when <code>lhs</code> path matches the <code>reversible</code> value that will be passed to the <code>django.urls.reverse()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>lhs</code> <code>str</code> <p>lhs stands for lefthand side, should be first positional element in the tag</p> required <code>reversible</code> <code>str</code> <p>The value will be passed to the <code>django.urls.reverse()</code> without args, kwargs</p> required <p>Returns:</p> Name Type Description <code>SafeText</code> <code>SafeText</code> <p>The text \"aria-current=page\" if a match occurs, otherwise \"\"</p> Source code in <code>django_fragments/templatetags/fragments.py</code> Python<pre><code>@register.simple_tag\ndef curr(lhs: str, reversible: str) -&gt; SafeText:\n\"\"\"Returns a string `aria-current` for use as an attribute when `lhs` path matches the\n    `reversible` value that will be passed to the `django.urls.reverse()`.\n    Args:\n        lhs (str): lhs stands for lefthand side, should be first positional element in the tag\n        reversible (str): The value will be passed to the `django.urls.reverse()` without args, kwargs\n    Returns:\n        SafeText: The text \"aria-current=page\" if a match occurs, otherwise \"\"\n    \"\"\"  # noqa: E501\nreturn mark_safe(\"aria-current=page\" if lhs == reverse(reversible) else \"\")\n</code></pre>"},{"location":"og/","title":"<code>{% nava %}</code>","text":""},{"location":"og/#og_title","title":"og_title","text":"before:  fragmentafter: html  Inclusion in nav via Django Template Language<pre><code>{% og_title 'This is the title of my article' %}\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;title&gt;This is the title of my article&lt;/title&gt;\n&lt;meta property=\"og:title\" content=\"This is the title of my article\"/&gt;\n&lt;meta name=\"twitter:title\" content=\"This is the title of my article\"/&gt;\n</code></pre>"},{"location":"og/#og_desc","title":"og_desc","text":"before:  fragmentafter: html  Inclusion in nav via Django Template Language<pre><code>{% og_desc 'This is a description' %}\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;meta name=\"description\" content=\"This is a description}\"/&gt;\n&lt;meta property=\"og:description\" content=\"This is a description\"/&gt;\n&lt;meta name=\"twitter:description\" content=\"This is a description\"/&gt;\n</code></pre>"},{"location":"og/#og_img","title":"og_img","text":"before:  fragmentafter: html  Inclusion in nav via Django Template Language<pre><code>{% og_img url='http://open-graph-image-to-show' alt='Descriptive text to accompany image' %}\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;meta property=\"og:image\" content=\"http://open-graph-image-to-show\"/&gt;\n&lt;meta property=\"og:image:alt\" content=\"Descriptive text to accompany image}\"/&gt;\n&lt;meta name=\"twitter:image\" content=\"http://open-graph-image-to-show\"/&gt;\n&lt;meta name=\"twitter:image:alt\" content=\"Descriptive text to accompany image\"/&gt;\n</code></pre>"},{"location":"utils/","title":"Utils","text":""},{"location":"utils/#whitespaceless","title":"Whitespaceless","text":"<p>Remove whitespace from template tag via a Stackover flow answer from one Will Gordon. See answer:</p> before:  fragmentafter: html  Invocation via Django Template Language<pre><code>  {% whitespaceless %}\n    &lt;p class=\"  test\n                test2\n                test3  \"&gt;\n        &lt;a href=\"foo/\"&gt;Foo&lt;/a&gt;\n    &lt;/p&gt;\n{% endwhitespaceless %}\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;p class=\"test test2 test3\"&gt;&lt;a href=\"foo/\"&gt;Foo&lt;/a&gt;&lt;/p&gt;\n</code></pre>"},{"location":"utils/#filter-attributes","title":"Filter Attributes","text":"<p>Filter <code>k</code>, <code>v</code> from <code>d</code> based on keys prefixed with <code>&lt;key&gt;_</code>. Based on this result, rename or replace the key, depending on the <code>unprefix</code> flag.</p> <p>This enables a shortcut for gathering all <code>&lt;key&gt;-</code>* attributes found in the dict <code>d</code> and parse them properly before inserting them into html tags.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; res = filter_attrs(key=\"aria\", d={\"aria_hidden\":\"true\"})\n&gt;&gt;&gt; res['aria-hidden'] == \"true\"\nTrue\n&gt;&gt;&gt; res_hx = filter_attrs(key=\"hx\", d={\"hx_get\":\"https://test.html\",  \"hx_target\":\"body\"})\n&gt;&gt;&gt; res_hx['hx-get'] == \"https://test.html\"\nTrue\n&gt;&gt;&gt; res_hx['hx-target'] == \"body\"\nTrue\n&gt;&gt;&gt; res_dt = filter_attrs(key=\"data\", d={\"data_site_good\":\"https://test.html\"})\n&gt;&gt;&gt; res_dt['data-site-good'] == \"https://test.html\"\nTrue\n&gt;&gt;&gt; parent_res = filter_attrs(key=\"parent\", d={\"non-a-parent\": \"test\", \"parent_class\":\"flex items-center\", \"parent_title\": \"I should be centered\"}, unprefix=True)\n&gt;&gt;&gt; \"parent_class\" in parent_res\nFalse\n&gt;&gt;&gt; \"class\" in parent_res\nTrue\n&gt;&gt;&gt; \"title\" in parent_res\nTrue\n&gt;&gt;&gt; \"non-a-parent\" in parent_res\nFalse\n&gt;&gt;&gt; pre_res = filter_attrs(key=\"pre\", d={\"pre_class\":\"sr-only\"}, unprefix=True)\n&gt;&gt;&gt; \"class\" in pre_res\nTrue\n&gt;&gt;&gt; res_btn = filter_attrs(key=\"btn\", d={\"btn_name\":\"i-am-button\", \"btn_id\": \"btn-1\"}, unprefix=True)\n&gt;&gt;&gt; res_btn[\"name\"] == \"i-am-button\"\nTrue\n&gt;&gt;&gt; res_btn[\"id\"] == \"btn-1\"\nTrue\n&gt;&gt;&gt; res_a= filter_attrs(key=\"a\", d={\"a_href\":\"#\", \"a_target\": \"_self\"}, unprefix=True)\n&gt;&gt;&gt; res_a[\"href\"] == \"#\"\nTrue\n&gt;&gt;&gt; res_a[\"target\"] == \"_self\"\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>dict</code> <p>Values from a template tag.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: dict to be used for a html tag's aria-* attributes.</p> Source code in <code>django_fragments/templatetags/utils/filter_attrs.py</code> Python<pre><code>def filter_attrs(key: str, d: dict, unprefix: bool = False) -&gt; dict[str, str]:\n\"\"\"Filter `k`, `v` from `d` based on keys prefixed with `&lt;key&gt;_`. Based on this result, rename or replace the key,\n    depending on the `unprefix` flag.\n    This enables a shortcut for gathering all `&lt;key&gt;-`* attributes found in the dict `d` and parse them properly\n    before inserting them into html tags.\n    Examples:\n        &gt;&gt;&gt; res = filter_attrs(key=\"aria\", d={\"aria_hidden\":\"true\"})\n        &gt;&gt;&gt; res['aria-hidden'] == \"true\"\n        True\n        &gt;&gt;&gt; res_hx = filter_attrs(key=\"hx\", d={\"hx_get\":\"https://test.html\",  \"hx_target\":\"body\"})\n        &gt;&gt;&gt; res_hx['hx-get'] == \"https://test.html\"\n        True\n        &gt;&gt;&gt; res_hx['hx-target'] == \"body\"\n        True\n        &gt;&gt;&gt; res_dt = filter_attrs(key=\"data\", d={\"data_site_good\":\"https://test.html\"})\n        &gt;&gt;&gt; res_dt['data-site-good'] == \"https://test.html\"\n        True\n        &gt;&gt;&gt; parent_res = filter_attrs(key=\"parent\", d={\"non-a-parent\": \"test\", \"parent_class\":\"flex items-center\", \"parent_title\": \"I should be centered\"}, unprefix=True)\n        &gt;&gt;&gt; \"parent_class\" in parent_res\n        False\n        &gt;&gt;&gt; \"class\" in parent_res\n        True\n        &gt;&gt;&gt; \"title\" in parent_res\n        True\n        &gt;&gt;&gt; \"non-a-parent\" in parent_res\n        False\n        &gt;&gt;&gt; pre_res = filter_attrs(key=\"pre\", d={\"pre_class\":\"sr-only\"}, unprefix=True)\n        &gt;&gt;&gt; \"class\" in pre_res\n        True\n        &gt;&gt;&gt; res_btn = filter_attrs(key=\"btn\", d={\"btn_name\":\"i-am-button\", \"btn_id\": \"btn-1\"}, unprefix=True)\n        &gt;&gt;&gt; res_btn[\"name\"] == \"i-am-button\"\n        True\n        &gt;&gt;&gt; res_btn[\"id\"] == \"btn-1\"\n        True\n        &gt;&gt;&gt; res_a= filter_attrs(key=\"a\", d={\"a_href\":\"#\", \"a_target\": \"_self\"}, unprefix=True)\n        &gt;&gt;&gt; res_a[\"href\"] == \"#\"\n        True\n        &gt;&gt;&gt; res_a[\"target\"] == \"_self\"\n        True\n    Args:\n        d (dict): Values from a template tag.\n    Returns:\n        dict[str, str]: dict to be used for a html tag's aria-* attributes.\n    \"\"\"  # noqa: E501\nreturn {\n(k.removeprefix(f\"{key}_\") if unprefix else k.replace(\"_\", \"-\")): v\nfor k, v in d.items()\nif k.startswith(f\"{key}_\")\n}\n</code></pre>"},{"location":"utils/#wrap-icon","title":"Wrap Icon","text":"before:  fragmentafter: html  raw x_mark_mini from heroicons copy/pasted<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5\"&gt;\n&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" /&gt;\n&lt;/svg&gt;\n</code></pre> Output HTML after the Template is populated with the Context.<pre><code>&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;\n&lt;svg aria-hidden=\"true\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" viewbox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;path d=\"M6 18L18 6M6 6l12 12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;\n&lt;/svg&gt;\n</code></pre> <p>Supplement html fragment of <code>&lt;svg&gt;</code> icon with css classes and attributes, include parent/sibling <code>&lt;span&gt;</code>s when parameters dictate.</p> <p>The following kwargs: <code>pre_</code>, <code>post_</code>, and <code>parent_</code> args are respected.</p> <p>So <code>pre_text</code> + <code>pre_class</code> will add:</p> HTML<pre><code> &lt;!-- pre_ implies before the icon, with special rule for pre_text --&gt;\n&lt;span class='the-value-of-pre_class'&gt;the-value-of-pre_text&lt;/span&gt;&lt;svg&gt;&lt;/svg&gt;\n</code></pre> <p><code>post_text</code> + <code>post_class</code> will add:</p> HTML<pre><code>&lt;!-- post_ implies after the icon, with special rule for post_text --&gt;\n&lt;svg&gt;&lt;/svg&gt;&lt;span class='the-value-of-post_class'&gt;the-value-of-post_text&lt;/span&gt;\n</code></pre> <p><code>parent_class</code>  + <code>parent_title</code> will add:</p> HTML<pre><code> &lt;!-- parent_ implies a wrapper over the icon,\n 'parent_text' will not have same effect.\n --&gt;\n&lt;span class='the-value-of-parent_class' title='the-value-of-parent_title'&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/span&gt;\n</code></pre> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; markup = '&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5\"&gt;&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" /&gt;&lt;/svg&gt;'\n&gt;&gt;&gt; res = wrap_svg(html_markup=markup, pre_text=\"Close menu\", pre_class=\"sr-only\", aria_hidden=\"true\")\n&gt;&gt;&gt; len(res.contents) == 2\nTrue\n&gt;&gt;&gt; res.contents[0]\n&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;\n&gt;&gt;&gt; res.contents[1].attrs == {'xmlns': 'http://www.w3.org/2000/svg', 'viewbox': '0 0 20 20', 'fill': 'currentColor', 'class': ['w-5', 'h-5'], 'aria-hidden': 'true'}\nTrue\n&gt;&gt;&gt; parented = wrap_svg(html_markup=markup, parent_tag=\"button\", pre_text=\"Close menu\", pre_class=\"sr-only\", aria_hidden=\"true\")\n&gt;&gt;&gt; elements = list(parented.children)\n&gt;&gt;&gt; elements[0].name == 'button'\nTrue\n&gt;&gt;&gt; list(elements[0].children)\n[&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;, &lt;svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewbox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\"&gt;&lt;/path&gt;&lt;/svg&gt;]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>html_markup</code> <code>str</code> <p>The template that contains the <code>&lt;svg&gt;</code> tag converted into its html string format.</p> required <code>css</code> <code>str</code> <p>Previously defined CSS to add to the <code>&lt;svg&gt;</code> icon. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SafeString</code> <code>BeautifulSoup</code> <p>Small HTML fragment visually representing an svg icon.</p> Source code in <code>django_fragments/templatetags/utils/wrap_svg.py</code> Python<pre><code>def wrap_svg(html_markup: str, css: str | None = None, **kwargs) -&gt; BeautifulSoup:\n\"\"\"Supplement html fragment of `&lt;svg&gt;` icon with css classes and attributes, include parent/sibling `&lt;span&gt;`s when parameters dictate.\n    The following kwargs: `pre_`, `post_`, and `parent_` args are respected.\n    So `pre_text` + `pre_class` will add:\n    ```html\n     &lt;!-- pre_ implies before the icon, with special rule for pre_text --&gt;\n    &lt;span class='the-value-of-pre_class'&gt;the-value-of-pre_text&lt;/span&gt;&lt;svg&gt;&lt;/svg&gt;\n    ```\n    `post_text` + `post_class` will add:\n    ```html\n    &lt;!-- post_ implies after the icon, with special rule for post_text --&gt;\n    &lt;svg&gt;&lt;/svg&gt;&lt;span class='the-value-of-post_class'&gt;the-value-of-post_text&lt;/span&gt;\n    ```\n    `parent_class`  + `parent_title` will add:\n    ```html\n     &lt;!-- parent_ implies a wrapper over the icon,\n     'parent_text' will not have same effect.\n     --&gt;\n    &lt;span class='the-value-of-parent_class' title='the-value-of-parent_title'&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/span&gt;\n    ```\n    Examples:\n        &gt;&gt;&gt; markup = '&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" class=\"w-5 h-5\"&gt;&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" /&gt;&lt;/svg&gt;'\n        &gt;&gt;&gt; res = wrap_svg(html_markup=markup, pre_text=\"Close menu\", pre_class=\"sr-only\", aria_hidden=\"true\")\n        &gt;&gt;&gt; len(res.contents) == 2\n        True\n        &gt;&gt;&gt; res.contents[0]\n        &lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;\n        &gt;&gt;&gt; res.contents[1].attrs == {'xmlns': 'http://www.w3.org/2000/svg', 'viewbox': '0 0 20 20', 'fill': 'currentColor', 'class': ['w-5', 'h-5'], 'aria-hidden': 'true'}\n        True\n        &gt;&gt;&gt; parented = wrap_svg(html_markup=markup, parent_tag=\"button\", pre_text=\"Close menu\", pre_class=\"sr-only\", aria_hidden=\"true\")\n        &gt;&gt;&gt; elements = list(parented.children)\n        &gt;&gt;&gt; elements[0].name == 'button'\n        True\n        &gt;&gt;&gt; list(elements[0].children)\n        [&lt;span class=\"sr-only\"&gt;Close menu&lt;/span&gt;, &lt;svg aria-hidden=\"true\" class=\"w-5 h-5\" fill=\"currentColor\" viewbox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\"&gt;&lt;/path&gt;&lt;/svg&gt;]\n    Args:\n        html_markup (str): The template that contains the `&lt;svg&gt;` tag converted into its html string format.\n        css (str, optional): Previously defined CSS to add to the `&lt;svg&gt;` icon. Defaults to None.\n    Returns:\n        SafeString: Small HTML fragment visually representing an svg icon.\n    \"\"\"  # noqa: E501\nsoup = BeautifulSoup(html_markup, \"html.parser\")\nicon = soup(\"svg\")[0]\nif css:\nicon[\"class\"] = css\nif aria_attrs := filter_attrs(\"aria\", kwargs):\nfor k, v in aria_attrs.items():\nicon[k] = v\nparent_tag = None\nif tagname := kwargs.pop(\"parent_tag\", None):\nif tagname in [\"button\", \"a\", \"span\", \"div\"]:\nparent_tag = soup.new_tag(tagname)\nif parent_attrs := filter_attrs(\"parent\", kwargs, unprefix=True):\nif not parent_tag:\nparent_tag = soup.new_tag(\"span\")\nfor k, v in parent_attrs.items():\nparent_tag[k] = v\nif parent_tag:\nicon.wrap(parent_tag)\nif left := kwargs.pop(\"pre_text\", None):  # &lt;span&gt;, left of &lt;svg&gt;\npre_span = soup.new_tag(\"span\")\npre_span.string = left\nif pre_attrs := filter_attrs(\"pre\", kwargs, unprefix=True):\nfor k, v in pre_attrs.items():\npre_span[k] = v\nicon.insert_before(pre_span)\nelif right := kwargs.pop(\"post_text\", None):  # &lt;span&gt;, right of &lt;svg&gt;\npost_span = soup.new_tag(\"span\")\npost_span.string = right\nif post_attrs := filter_attrs(\"post\", kwargs, unprefix=True):\nfor k, v in post_attrs.items():\npost_span[k] = v\nicon.insert_after(post_span)\nreturn soup\n</code></pre>"}]}